{"version":3,"sources":["day.jpg","night.jpg","comps/More.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","More","state","city","staticCities","this","getCrawler","undefined","class","style","display","map","c","Card","className","width","margin","backgroundColor","CardBody","CardTitle","City","Temp","CardText","src","Image","Discription","i","fetch","then","res","json","results","cityUni","getData","length","push","React","Component","Day","require","Night","App","props","cityWeather","image","navbarColor","buttonColor","cityInfo","onKeyPress","e","which","onKeyPress1","setState","modalOpened","setmodalOpened","visible","onDismiss","bind","hour","Date","getHours","document","body","backgroundImage","r","data","geoplugin_city","Navbar","color","expand","fontSize","Container","NavbarBrand","Nav","navbar","Input","height","onChange","handleText","name","type","value","defaultCity","Button","onClick","Alert","isOpen","toggle","Modal","aria-label","data-dismiss","aria-hidden","id","textAlign","ev","target","console","log","allWeather","getElementById","innerText","CityName","Wind","Humidity","innerHTML","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f247aa7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/day.f3d628ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/night.75d228bc.jpg\";","import React from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, CardText, CardLink } from 'reactstrap';\r\n\r\n\r\nclass More extends React.Component {\r\n\r\n    state = {\r\n        city: ['new york', 'tel aviv', 'paris'],\r\n        staticCities: []\r\n    }\r\n    componentDidMount() {\r\n        this.getCrawler() //get data\r\n    }\r\n\r\n    render() {\r\n        if (this.state.city === undefined) {\r\n            return (\r\n                <div>\r\n                    <h1>Loading..</h1>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n\r\n                <div>\r\n                    <h1>More Locations</h1>\r\n                    <div class='moreCities' style={{ display: 'flex' }}>\r\n                        {this.state.staticCities.map(c =>\r\n                            <Card className='card firstRow' style={{ width: '10rem', margin: '10px', backgroundColor: \"rgba(255, 255, 255, 0.2)\" }}>\r\n                                <CardBody>\r\n                                    <CardTitle><h6>{c.City}</h6></CardTitle>\r\n                                    <CardTitle>\r\n                                        {c.Temp}\r\n                                    </CardTitle>\r\n                                    <CardText> <img className='img' src={c.Image}></img></CardText>\r\n                           <h6 class=\"text-primary\" >{c.Discription} </h6>\r\n                                </CardBody>\r\n                            </Card>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCrawler() {\r\n        for (let i = 0; i < this.state.city.length; i++) { // loop threw state city to get data for static cities\r\n            var city = this.state.city[i];\r\n            fetch(`http://localhost:3000/getlink/${city}`)\r\n                .then(res => res.json())\r\n                .then(results => {\r\n                    var cityUni = results\r\n                    this.getData(cityUni, this.state.city[i])\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n    getData(cityUni, city) {\r\n        return fetch(`http://localhost:3000/getforecast?cityUni=${cityUni}`)\r\n            .then(res => res.json())\r\n            .then(results => {\r\n                results.City = city;\r\n                this.state.staticCities.push(results);\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport default More;","import React from 'react';\nimport './App.css';\nimport More from './comps/More';\n\nimport { Button, Input, Modal, Card, CardBody, Alert, NavbarBrand, Navbar, Nav, Container } from \"reactstrap\";\n\nvar Day = require('./day.jpg');\nvar Night = require('./night.jpg');\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalOpened: true,\n      setmodalOpened: true,\n      visible: false\n    };\n    this.onDismiss = this.onDismiss.bind(this);\n\n  }\n  state = {\n    cityWeather: '',\n    image: '',\n    navbarColor: '',\n    buttonColor: '',\n    cityInfo: [],\n  }\n\n  onDismiss() { //close and open modal\n    this.setState({ visible: !this.state.visible });\n  }\n  componentDidMount() {// get hour - change colors accordingly\n    var now = new Date();\n    var hour = now.getHours();\n    if (hour > 4 && hour < 18) {\n      document.body.style.backgroundImage = 'url(' + Day + ')';\n      \n      this.state.navbarColor = 'transparent';\n      this.state.buttonColor = 'warning';\n\n    } else {\n      document.body.style.backgroundImage = 'url(' + Night + ')';\n      this.state.navbarColor = \"info\"\n      this.state.buttonColor = 'primary'\n    }\n    fetch(`http://www.geoplugin.net/json.gp`) // fetch current location by user location \n      .then(r => r.json())\n      .then(data => {\n        this.setState({ city: data.geoplugin_city })\n        this.getCrawler();\n      });\n  }\n  render() {\n    return (\n      <>\n        <Navbar color={this.state.navbarColor} expand=\"md\" style={{ fontSize: '20px', color: 'white' }}>\n          <Container>\n            <NavbarBrand style={{ fontSize: '20px' }} >\n              Weather\n          </NavbarBrand>\n            <Nav style={{ display: 'inline' }} navbar>\n              <Input onKeyPress={this.onKeyPress.bind(this)} style={{ height: '2rem', width: '10rem', margin: '10px', backgroundColor: \"rgba(255, 255, 255, 0.2)\", display: 'inline ' }} className='myCity' onChange={this.handleText.bind(this)} name='city' type='text' value={this.state.defaultCity} />\n              <Button color={this.state.buttonColor}\n                onClick={this.getCrawler.bind(this)}>Change Location</Button>\n            </Nav>\n          </Container>\n        </Navbar>\n        <Alert color=\"danger\" isOpen={this.state.visible} toggle={this.onDismiss}>\n          <b>Oh oh...</b> We are so SORRY! we don't have the trip tips for your location! the tips for now are in your area - Have fun!\n</Alert>\n\n        <Modal isOpen={this.state.modalOpened}>\n          <div className=\"modal-header\">\n            <button\n              aria-label=\"Close\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              type=\"button\"\n              onClick={() => this.setState({ modalOpened: false })}\n            >\n              <span aria-hidden={true}>×</span>\n            </button>\n            <h5 className=\"modal-title\" id=\"exampleModalLiveLabel\">\n              Welcome to Weather!         </h5>\n\n          </div>\n          <div className=\"modal-body\">\n            <p>Which location would you like your forecast for?</p>\n            City:<Input onKeyPress={this.onKeyPress1.bind(this)} style={{ width: '10rem', margin: '10px', backgroundColor: \"rgba(255, 255, 255, 0.2)\", display: 'inline ' }} className='myCity' onChange={this.handleText.bind(this)} name='city' type='text' value={this.state.defaultCity} />\n          </div>\n          <div className=\"modal-footer\">\n            <div className=\"left-side\">\n              <Button\n                className=\"btn-link\"\n                color=\"default\"\n                data-dismiss=\"modal\"\n                type=\"button\"\n                onClick={() => {\n                  this.getCrawler();\n                  this.setState({ modalOpened: false });\n                }}\n              >\n                Get Weather!\n            </Button>\n            </div>\n            <div className=\"divider\" />\n            <div className=\"right-side\">\n              <Button\n                className=\"btn-link\"\n                color=\"success\"\n                type=\"button\"\n\n                onClick={() => this.setState({ modalOpened: false })}\n              >\n                Use My Location\n            </Button>\n            </div>\n          </div>\n        </Modal>\n\n        <div className=\"App cardMainContainer\">\n          <div className='mainDiv'>\n            <Card style={{ textAlign: 'left', backgroundColor: \"rgba(255, 255, 255, 0.2)\" }}>\n              <CardBody className='containerMain'>\n                <h2 className='today' id='title'></h2>\n                <h3 className='today' id='weater' className='weather'></h3>\n                <img id='image'></img>\n                <h5 className='today' id='wind' className='weather'></h5>\n                <h5 className='today' id='humidity' className='weather'></h5>\n                <h5 id='descriptionWeather' style={{ color: 'black', margin: '0px' }} ></h5>\n              </CardBody>\n            </Card>\n\n            <div class='moreCities' style={{display:'flex'}} >\n\n              <More/>\n            </div>\n          </div>\n        </div></>\n    );\n  }\n  handleText(ev) {\n    this.setState({ [ev.target.name]: ev.target.value })\n  }\n\n\n  onKeyPress = (e) => { // makes enter key board press\n    if (e.which === 13) {\n      this.getCrawler();\n    }\n  }\n\n  onKeyPress1 = (e) => {// makes enter key board press\n    if (e.which === 13) {\n      this.getCrawler();\n      this.setState({ modalOpened: false });\n\n    }\n  }\n\n  getCrawler() { //get specific link by crawling.\n    return fetch(`http://localhost:3000/getlink/${this.state.city}`)\n      .then(res => res.json())\n      .then(results => {\n        var cityUni = results\n        this.getData(cityUni)\n\n      })\n  }\n\n  getData(cityUni) {// get by link from 'getcrawler' data from weather website\n    return fetch(`http://localhost:3000/getforecast?cityUni=${cityUni}`)\n      .then(res => res.json())\n      .then(results => {\n        this.state.cityWeather = results.Temp;\n        console.log(results);\n        this.setState({ allWeather: results })\n        this.state.image = results.Image;\n        document.getElementById('title').innerText = results.CityName;\n        document.getElementById('wind').innerText = 'Wind ' + results.Wind;\n        document.getElementById('humidity').innerText = results.Humidity;\n        document.getElementById('image').src = results.Image;\n        document.getElementById('weater').innerHTML = this.state.cityWeather;\n        document.getElementById('descriptionWeather').innerHTML = results.Discription;\n\n      })\n  }\n\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./assets/demo/demo.css\";\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/paper-kit.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}